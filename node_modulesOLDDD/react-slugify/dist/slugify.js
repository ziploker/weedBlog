"use strict";
exports.__esModule = true;
var stripAccents = function (str) {
    var accents = 'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž';
    var fixes = 'AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz';
    var split = accents.split('').join('|');
    var reg = new RegExp("(" + split + ")", 'g');
    function replacement(a) {
        return fixes[accents.indexOf(a)] || '';
    }
    return str.replace(reg, replacement);
};
// *+~.()\'"!:@
// const blacklist = ['*', '+', '~', '.', '(', ')', '\\', "'", '"', '!', ':', '@'];
var harmonize = function (text, delimiter, ignoreInvalid) {
    if (ignoreInvalid === void 0) { ignoreInvalid = false; }
    var harmonized = stripAccents(text)
        .trim()
        .toLowerCase();
    if (ignoreInvalid) {
        return harmonized.replace(/\s+/g, delimiter);
    }
    return harmonized.replace(new RegExp("[^a-z0-9" + delimiter + "]+", 'g'), delimiter);
};
var slugify = function (node, options) {
    if (options === void 0) { options = { delimiter: '-', prefix: '' }; }
    if (!options.delimiter)
        options.delimiter = '-';
    if (!options.prefix)
        options.prefix = '';
    if (!node || typeof node === 'boolean') {
        return '';
    }
    var delimiter = options.delimiter, prefix = options.prefix;
    // string, number
    if (typeof node === 'string' || typeof node === 'number') {
        var harmonizedPrefix = harmonize(prefix, delimiter, true);
        var harmonizedNode = harmonize(String(node), delimiter);
        if (harmonizedPrefix) {
            return "" + harmonizedPrefix + delimiter + harmonizedNode;
        }
        return harmonizedNode;
    }
    // empty object
    if (typeof node === 'object' && Object.keys(node).length === 0) {
        return '';
    }
    // We did the check about empty object before
    // const castedNode = node as React.ReactElement<any> | React.ReactNodeArray | React.ReactPortal;
    // ReactPortal
    if ('children' in node) {
        return slugify(node.children);
    }
    // ReactNodeArray
    if (node instanceof Array) {
        return slugify(node.map(function (n) { return slugify(n, { delimiter: delimiter }); }).join(delimiter), options);
    }
    // ReactElement
    if ('type' in node)
        return slugify(node.props.children, options);
    // unhandled case
    return '';
};
exports["default"] = slugify;
//# sourceMappingURL=slugify.js.map